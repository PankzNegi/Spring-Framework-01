<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN"
                  "http://www.springframework.org/dtd/spring-beans-2.0.dtd">
<beans>
<bean id="triangle" class="com.pankz.Triangle">
<property name="points">
<list>
<ref bean="zeroPoint"/>
<ref bean="point1"/>
<ref bean="point2"/>
</list>

</property>


<!--  
<constructor-arg value="Equilateral"/>
<constructor-arg value='12'/>-->
</bean>
<bean id="zeroPoint" class="com.pankz.Point">
<property name="x" value="0"/>
<property name="y" value="0"/>

</bean>
<bean id="point1" class="com.pankz.Point">
<property name="x" value="-21"/>
<property name="y" value="0"/>

</bean>
<bean id="point2"  class="com.pankz.Point">
<property name="x" value="32"/>
<property name="y" value="0"/>

</bean>





<alias name="triangle" alias="triangle-alias"/>
</beans>





<!--  THIS FILE IS THE BLUEPRINTS FOR THE OBJECT THAT WE ARE GOING TO CREATE.
Explanation of property tag->When we ask spring to get us the triangle object it just scans id and then class and then property..
and then it fill that "value" to the property "name" here "type" and then return us an object that has a value set for that property.



NOTE:In spring we are specifying the data type same way as a string
Spring does automatically type conversion,here we are specifying as strings for both of them
Therefore use type=int in constructor tag. In case of string type="java.lang.String" as string is an object.
<constructor-arg type="int" value="12"/>
<constructor-args type="java.lang.String value="20"/>
OR via indexes
index=0 value="something for first index=1 value="something" for second
it fills first arguments and then second arguments

InnerBean:

point b and point c implements inner bean these two points are specific for the triangles.

idref- extra vaildation with idref,makesure that their is bean with that specific id in spring.xml,if not it throws an exception.



-->
