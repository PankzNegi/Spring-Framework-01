<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN"
                  "http://www.springframework.org/dtd/spring-beans-2.0.dtd">
<beans default-init-method="myInit" default-destroy-method="cleanUp">
<bean id="parenttriangle" class="com.pankz.Triangle" abstract="true"  >
<property name="points">
<list>
<ref bean="zeroPoint"/>
</list>
</property>
</bean>



<bean id="triangle1" class="com.pankz.Triangle" parent="parenttriangle">
<property name="points">
<list merge="true">

<ref bean="point1"/>
<ref bean="point2"/>

</list>
</property>
</bean>
 


   <!-- Here in this case pointB overrides pointA and will show only pointB in output despite
of inheritence coz we are defining the element for the same member variable i.e "points" so we have to merge both of them 
"merge" will merge the elements defined in child bean to elements defined in parent bean-->
<bean id="triangle2" class="com.pankz.Triangle" parent="parenttriangle">
<property name="points">
<list merge="true">


<ref bean="point2"/>


</list>
</property>
</bean>







<!--  
<constructor-arg value="Equilateral"/>
<constructor-arg value='12'/>-->

<bean id="zeroPoint" class="com.pankz.Point">
<property name="x" value="${zeroPoint.pointX}"/>
<property name="y" value="${zeroPoint.pointY}"/>

</bean>
<bean id="point1" class="com.pankz.Point">
<property name="x" value="-21"/>
<property name="y" value="0"/>

</bean>
<bean id="point2"  class="com.pankz.Point">
<property name="x" value="32"/>
<property name="y" value="0"/>

</bean>
<!-- 
<bean class ="com.pankz.DisplayNameBeanPostProcessor"/>  

<bean class="com.pankz.MyBeanFactoryPP"/>  -->
<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
<property name="location" value="pointsconfig.properties"/>


</bean>






</beans>





<!--  THIS FILE IS THE BLUEPRINTS FOR THE OBJECT THAT WE ARE GOING TO CREATE.
Explanation of property tag->When we ask spring to get us the triangle object it just scans id and then class and then property..
and then it fill that "value" to the property "name" here "type" and then return us an object that has a value set for that property.



NOTE:In spring we are specifying the data type same way as a string
Spring does automatically type conversion,here we are specifying as strings for both of them
Therefore use type=int in constructor tag. In case of string type="java.lang.String" as string is an object.
<constructor-arg type="int" value="12"/>
<constructor-args type="java.lang.String value="20"/>
OR via indexes
index=0 value="something for first index=1 value="something" for second
it fills first arguments and then second arguments

InnerBean:

point b and point c implements inner bean these two points are specific for the triangles.

idref- extra vaildation with idref,makesure that their is bean with that specific id in spring.xml,if not it throws an exception.


"autowire"- intelligently guessing what the reference is...
If the name i.e id of beans is same as the name of member variables (pointA,pointB..) then instead of any property and ref in the bean tag
We can ask spring to autowire beans based on name.(autowire="byName")It checks for all the member variables and check if their is any bean
with this name defined in .xml then it automatically reference that bean to this member variable

There is another way to "autowire by byType" when we have only one bean of each type (only one bean of point)and one member variable (if pointA only)
In this case it looks for type (the class for which it is defined).
if we have three point object then we can't do this type of autowiring.

"autowiring by constructor"-constructor injection instead of setter injection..injecting value through constructor
Here also one condition -one bean per type...



-->
